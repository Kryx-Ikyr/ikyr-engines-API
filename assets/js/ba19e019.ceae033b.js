"use strict";(self.webpackChunkikyr_engines=self.webpackChunkikyr_engines||[]).push([[788],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,w=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(w,l(l({ref:t},p),{},{components:n})):r.createElement(w,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4477:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={},c="Hello world step by step",s={unversionedId:"ire/explain_hello_world",id:"ire/explain_hello_world",isDocsHomePage:!1,title:"Hello world step by step",description:"Here we will take the Hello world ! example and explain it line by line.",source:"@site/docs/ire/explain_hello_world.md",sourceDirName:"ire",slug:"/ire/explain_hello_world",permalink:"/ikyr-engines/docs/ire/explain_hello_world",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/ire/explain_hello_world.md",version:"current",frontMatter:{},sidebar:"ireSidebar",previous:{title:"Hello World !",permalink:"/ikyr-engines/docs/ire/hello_world"},next:{title:"context",permalink:"/ikyr-engines/docs/ire/doc/context"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"hello-world-step-by-step"},"Hello world step by step"),(0,a.kt)("p",null,"Here we will take the Hello world ! example and explain it line by line."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#define VULKAN_COMPIL\n#include "IkyrRenderEngineAPI.h"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"VULKAN_COMPIL indicate that you want to use Vulkan renderer (TODO is it still needed?)"),(0,a.kt)("li",{parentName:"ul"},'"IkyrRenderEngineAPI.h" is the main header that you have to include to use IRE, of course.')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#define IRE Ikyr::Renderer\n")),(0,a.kt)("p",null,"This shortens the namespace Ikyr::Renderer into IRE for more readability. We'll use it for Ikyr Render Engine in this documentation too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"IRE::System *system = new IRE::System();\nsystem->init();\n")),(0,a.kt)("p",null,"Every program using IRE have to create a system. This is the base to use the program. Always create only one system, even if you want to create multiple window/threads/contexts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"IRE::ContextOptions contextOptions;\ncontextOptions.bufferingStrategy = IRE::BufferingStrategy::TRIPLE_BUFFERING;\ncontextOptions.displayMode = IRE::DisplayMode::MAILBOX;\nIRE::Context *context = new IRE::Context(system, contextOptions);\n")),(0,a.kt)("p",null,"Here we create our first ",(0,a.kt)("a",{parentName:"p",href:"doc/context"},"context"),". A context will manage a group of windows that you want to be synchronized in the same thread.\nIf you want independant windows, you have to create a new context (see ",(0,a.kt)("a",{parentName:"p",href:"doc/context"},"multi-windows"),").\nAs we only have a single window here, we only need a single context.\nWe use two options here for this context that will impact all following declarations in this context:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Triple buffering: The windows will have a triple buffer and objects you'll draw on it will have needed buffer tripled too."),(0,a.kt)("li",{parentName:"ul"},"Mailbox: We indicate that we want to use mailbox mode (similar to vertical synchronization, but too fast programs can still update frames in queue)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"IRE::RenderWindowOptions options;\noptions.fullscreen = false;\noptions.createDepthStencilBuffer  = false;\nIRE::RenderWindow *window = new IRE::RenderWindow(options, context, 1366, 768);\n")),(0,a.kt)("p",null,"And now we can create our window ! We simply create it in windowed mode, with a size of 1366x768.\nThe interesting part here is the option ",(0,a.kt)("strong",{parentName:"p"},"createDepthStencilBuffer"),". This option will create a depth and stencil buffer along the window surface.\nFor 3D applications, it will be mandatory to draw triangles in the right order.\nHowever, for 2D applications, you can choose between 3 ways for your z-ordering:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use a depth and stencil buffer, that will do the job automatically, at the cost of buffer and a buffer check at each draw. Use this method will allow the engine to run your draws asynchronously. To indicate which object must be above another, you have to indicate a ",(0,a.kt)("a",{parentName:"li",href:"doc/z-order"},"z-order")," on each object. You can either do it automatically (increment z axis on each draw call) or indicate them manually."),(0,a.kt)("li",{parentName:"ul"},"Prevent the creation of a depth and stencil buffer will prevent to draw asynchronously, and so you'll have to draw your objects in the order you want the engine to draw them.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"IRE::Camera2D *camera = new IRE::Camera2D();\nwindow->setCamera(camera);\ncamera->setClipping(glm::vec2(-10000.0f, 10000.0f));\ncamera->setPosition(glm::vec2(0.0f, 768.0f));\ncamera->setViewport(IRE::Viewport(0, 0, 100, 100, true));\ncamera->setScissor(IRE::Scissor(true));\n")),(0,a.kt)("p",null,"OK"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"IRE::Rectangle2D *object = new IRE::Rectangle2D(context, 30, 30, currentTexture, false);// IRE::Color::Color(246, 156, 67));\nobject->prepareFor(window);\nobject->setTexture(window, textures.at(textureIndex));\nint posX = (objects.size() % 40) * 35 - 17;\nint posY = std::floor(objects.size() / 40) * 35 + 17;\nobject->setPosition(glm::vec2(posX, posY));\nobject->setDepth(objects.size());\n")),(0,a.kt)("p",null,"WE CREATE AN OBJECT"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"bool mustStayOpen = true;\n\nwhile (mustStayOpen) {\n    ...\n}\n")),(0,a.kt)("p",null,"Our main loop that will draw each frame and manage user events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"context->startFrame();\nwindow->draw(object);\ncontext->endFrame();\n")),(0,a.kt)("p",null,"We start a new frame, draw our object, and end the frame."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"Ikyr::Renderer::ExternalEvent event;\nwhile (window->pollEvent(event))\n{\n    if (event.type == Ikyr::Renderer::Events::CLOSE_WINDOW || event.type == IRE::Events::KEY_PRESSED)\n    {\n        if (event.keyCode == 0 || event.keyCode == IRE::Events::KEY_ESCAPE)\n            mustStayOpen = false;\n    }\n}\n")),(0,a.kt)("p",null,"We poll events from the window to detect any closing event and break the loop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"window->waitAllFrames();\ncontext->markForDelete(object);\ndelete window;\ndelete camera;\ndelete context;\ndelete system;\n")),(0,a.kt)("p",null,"We delete all the stuff, in the same order than in their creation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"return 0;\n")),(0,a.kt)("p",null,"Everything went fine ! It's time to take a break..."))}d.isMDXComponent=!0}}]);